<?php
session_start();
require_once '../../api/config.php'; // Adjust path as needed

if (!isset($_SESSION['user_id'])) {
    header("Location: /auth/login.php");
    exit;
}

$pageTitle = "Тест Струпа (Внимание)";
$testType = 'attention_stroop'; // Specific test type for this page
$testMainCategory = 'attention'; // Main category for fetching items

include_once '../../includes/header.php'; // Adjust path as needed
?>

<div class="container py-4">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Тест Струпа: Оценка Переключаемости Внимания</h5>
                </div>
                <div class="card-body">
                    <p class="mb-2"><strong>Инструкция:</strong> На экране будут появляться слова, обозначающие цвета. Ваша задача — назвать <strong>цвет шрифта</strong>, которым написано слово, а не само слово. Нажимайте на кнопку, соответствующую цвету шрифта.</p>
                    <p class="mb-4">Пример: если слово <span style="color: blue;">КРАСНЫЙ</span> написано синим цветом, нужно нажать кнопку "Синий".</p>
                    
                    <div class="alert alert-info">
                        Тест начнется после нажатия кнопки "Начать тест". Будет представлено несколько проб.
                    </div>

                    <div class="text-center mb-4">
                        <button id="startButton" class="btn btn-primary btn-lg">Начать тест</button>
                    </div>

                    <div id="testArea" class="reaction-test-area mb-4" style="display: none;">
                        <div id="stimulusDisplay" class="stimulus-area text-center" style="height: 150px; display: flex; align-items: center; justify-content: center; font-size: 2.5rem; font-weight: bold;">
                            <!-- Stimulus will appear here -->
                        </div>
                        <div id="responseButtons" class="row g-2 mt-3">
                            <!-- Buttons will be generated by JS -->
                        </div>
                    </div>

                    <div id="progressContainer" class="mb-3"></div>

                    <div id="resultsContainer" style="display: none;">
                        <h5>Результаты Теста Струпа:</h5>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Проба</th>
                                    <th>Слово</th>
                                    <th>Цвет шрифта</th>
                                    <th>Ваш ответ</th>
                                    <th>Время реакции (мс)</th>
                                    <th>Правильно</th>
                                </tr>
                            </thead>
                            <tbody id="resultsTableBody"></tbody>
                        </table>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="alert alert-success"><strong>Среднее время правильных реакций:</strong> <span id="averageTime">0</span> мс</div>
                            </div>
                            <div class="col-md-6">
                                <div class="alert alert-info"><strong>Точность:</strong> <span id="accuracy">0</span>%</div>
                            </div>
                        </div>
                        <div class="d-grid gap-2 mt-3">
                            <button id="saveResultsButton" class="btn btn-success">Сохранить результаты</button>
                            <a href="/tests/index.php" class="btn btn-outline-primary">Вернуться к списку тестов</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Assuming js/test-progress.js is included via footer or globally
document.addEventListener('DOMContentLoaded', function () {
    const startButton = document.getElementById('startButton');
    const testArea = document.getElementById('testArea');
    const stimulusDisplay = document.getElementById('stimulusDisplay');
    const responseButtonsContainer = document.getElementById('responseButtons');
    
    const resultsContainer = document.getElementById('resultsContainer');
    const resultsTableBody = document.getElementById('resultsTableBody');
    const averageTimeDisplay = document.getElementById('averageTime');
    const accuracyDisplay = document.getElementById('accuracy');
    const saveResultsButton = document.getElementById('saveResultsButton');
    const progressContainer = document.getElementById('progressContainer');

    const testType = '<?php echo $testType; ?>';
    const testMainCategory = '<?php echo $testMainCategory; ?>';
    let testItems = [];
    let currentTrial = 0;
    let totalTrials = 0;
    let trialResults = [];
    let startTime;
    let progressBar;

    const possibleColors = [
        { name: 'Красный', value: 'red', hex: '#FF0000' },
        { name: 'Зеленый', value: 'green', hex: '#00AA00' },
        { name: 'Синий', value: 'blue', hex: '#0000FF' },
        { name: 'Желтый', value: 'yellow', hex: '#FFFF00', textColor: '#333' } // Yellow needs dark text
    ];

    function generateResponseButtons() {
        responseButtonsContainer.innerHTML = '';
        possibleColors.forEach(color => {
            const col = document.createElement('div');
            col.className = 'col';
            const button = document.createElement('button');
            button.className = 'btn btn-lg w-100';
            button.style.backgroundColor = color.hex;
            button.style.color = color.textColor || '#FFFFFF';
            button.textContent = color.name;
            button.dataset.colorValue = color.value;
            button.addEventListener('click', handleResponse);
            col.appendChild(button);
            responseButtonsContainer.appendChild(col);
        });
    }

    async function fetchTestItems() {
        try {
            const response = await fetch(`../../api/get_cognitive_test_items.php?test_main_category=${testMainCategory}`);
            const data = await response.json();
            if (data.success && data.tests) {
                const stroopTestData = data.tests.find(t => t.test_type === testType);
                if (stroopTestData && stroopTestData.items) {
                    testItems = stroopTestData.items.map(item => {
                        // Assuming item_content is { word: "СИНИЙ", color_name: "red", color_value: "#FF0000", correct_response: "red" }
                        // Or from DB: {"word": "КРАСНЫЙ", "color_value": "#0000FF", "color_name": "синий", "correct_response": "синий"}
                        return {
                            wordText: item.item_content.word, // e.g., "КРАСНЫЙ"
                            wordColorValue: item.item_content.color_value, // e.g., "#0000FF" (blue ink)
                            wordColorName: item.item_content.color_name, // e.g., "синий"
                            correctResponse: item.item_content.correct_response // e.g., "синий"
                        };
                    });
                    totalTrials = testItems.length;
                    if (totalTrials > 0) {
                        progressBar = TestProgress.initTrialProgressBar(progressContainer, totalTrials);
                        return true;
                    }
                }
            }
            console.error('Failed to fetch or parse Stroop test items:', data);
            alert('Не удалось загрузить задания для теста Струпа.');
            return false;
        } catch (error) {
            console.error('Error fetching test items:', error);
            alert('Ошибка при загрузке заданий.');
            return false;
        }
    }

    startButton.addEventListener('click', async () => {
        const itemsLoaded = await fetchTestItems();
        if (itemsLoaded) {
            startButton.style.display = 'none';
            document.querySelector('.alert-info').style.display = 'none';
            testArea.style.display = 'block';
            resultsContainer.style.display = 'none';
            resultsTableBody.innerHTML = '';
            trialResults = [];
            currentTrial = 0;
            progressBar.setVisible(true);
            progressBar.updateTrial(0);
            generateResponseButtons();
            nextTrial();
        }
    });

    function nextTrial() {
        if (currentTrial >= totalTrials) {
            endTest();
            return;
        }
        progressBar.updateTrial(currentTrial);
        const item = testItems[currentTrial];
        stimulusDisplay.textContent = item.wordText;
        stimulusDisplay.style.color = item.wordColorValue;
        
        // Random delay before showing stimulus to prevent rhythmic responses (optional)
        // For Stroop, immediate presentation after button setup is fine.
        startTime = Date.now();
    }

    function handleResponse(event) {
        if (!startTime) return; // Avoid processing clicks before stimulus is shown or after trial ends

        const endTime = Date.now();
        const reactionTime = endTime - startTime;
        const selectedColorValue = event.target.dataset.colorValue;
        const currentItem = testItems[currentTrial];
        const isCorrect = selectedColorValue === currentItem.correctResponse;

        trialResults.push({
            trial: currentTrial + 1,
            wordText: currentItem.wordText,
            wordColorName: currentItem.wordColorName,
            response: selectedColorValue,
            reactionTime: reactionTime,
            isCorrect: isCorrect
        });

        currentTrial++;
        if (currentTrial < totalTrials) {
            nextTrial();
        } else {
            endTest();
        }
    }

    function endTest() {
        testArea.style.display = 'none';
        progressBar.setVisible(false);
        resultsContainer.style.display = 'block';

        let totalReactionTime = 0;
        let correctCount = 0;

        trialResults.forEach(res => {
            const row = resultsTableBody.insertRow();
            row.insertCell().textContent = res.trial;
            row.insertCell().textContent = res.wordText;
            row.insertCell().textContent = res.wordColorName;
            row.insertCell().textContent = res.response;
            row.insertCell().textContent = res.reactionTime;
            const correctCell = row.insertCell();
            correctCell.textContent = res.isCorrect ? 'Да' : 'Нет';
            row.classList.add(res.isCorrect ? 'table-success' : 'table-danger');

            if (res.isCorrect) {
                correctCount++;
                totalReactionTime += res.reactionTime;
            }
        });

        const avgTime = correctCount > 0 ? (totalReactionTime / correctCount).toFixed(0) : "N/A";
        const accPercentage = totalTrials > 0 ? ((correctCount / totalTrials) * 100).toFixed(1) : 0;

        averageTimeDisplay.textContent = avgTime;
        accuracyDisplay.textContent = accPercentage;
    }

    saveResultsButton.addEventListener('click', async () => {
        const finalAccuracy = parseFloat(accuracyDisplay.textContent);
        const finalAverageTime = averageTimeDisplay.textContent !== "N/A" ? parseFloat(averageTimeDisplay.textContent) : null;

        const dataToSend = {
            test_type: testType,
            results: trialResults.map(r => ({ // Ensure this structure matches save_test_results.php expectations
                trial_number: r.trial,
                stimulus_value: JSON.stringify({word: r.wordText, color: r.wordColorName}), // Example stimulus
                response_value: r.response,
                reaction_time: r.reactionTime,
                is_correct: r.isCorrect
            })),
            accuracy: finalAccuracy,
            average_time: finalAverageTime,
            custom_score: null, // Stroop test primarily uses accuracy and average_time
            higher_is_better_accuracy: true,
            higher_is_better_avg_time: false,
            // Batch ID if part of a batch - get from URL query param if exists
            batch_id: new URLSearchParams(window.location.search).get('batch_id')
        };

        try {
            const response = await fetch('../../api/save_test_results.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dataToSend)
            });
            const result = await response.json();
            if (result.success) {
                alert('Результаты успешно сохранены!');
                const batchId = new URLSearchParams(window.location.search).get('batch_id');
                if (batchId) {
                    window.location.href = `/tests/test_batch.php?batch_id=${batchId}`;
                } else {
                    // Redirect to a general results page or test index
                    window.location.href = '/tests/my_results.php'; 
                }
            } else {
                alert('Ошибка при сохранении результатов: ' + result.message);
            }
        } catch (error) {
            console.error('Error saving results:', error);
            alert('Произошла ошибка при сохранении результатов.');
        }
    });
});
</script>

<?php
include_once '../../includes/footer.php'; // Adjust path as needed
?>
